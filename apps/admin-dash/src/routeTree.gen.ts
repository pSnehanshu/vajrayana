/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TransactionsImport } from './routes/transactions'
import { Route as TarrifImport } from './routes/tarrif'
import { Route as SettingsImport } from './routes/settings'
import { Route as RevenueImport } from './routes/revenue'
import { Route as ReportsImport } from './routes/reports'
import { Route as ProfileImport } from './routes/profile'
import { Route as LoginImport } from './routes/login'
import { Route as ExternalPlatformsImport } from './routes/external-platforms'
import { Route as DriversImport } from './routes/drivers'
import { Route as ChargingStationsImport } from './routes/charging-stations'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as DriversIndexImport } from './routes/drivers/index'
import { Route as ChargingStationsIndexImport } from './routes/charging-stations/index'
import { Route as SettingsServerImport } from './routes/settings/server'
import { Route as SettingsRolesImport } from './routes/settings/roles'
import { Route as SettingsMembersImport } from './routes/settings/members'
import { Route as SettingsAccountImport } from './routes/settings/account'
import { Route as DriversDriverIdImport } from './routes/drivers/$driverId'
import { Route as ChargingStationsStationIdImport } from './routes/charging-stations/$stationId'

// Create/Update Routes

const TransactionsRoute = TransactionsImport.update({
  path: '/transactions',
  getParentRoute: () => rootRoute,
} as any)

const TarrifRoute = TarrifImport.update({
  path: '/tarrif',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const RevenueRoute = RevenueImport.update({
  path: '/revenue',
  getParentRoute: () => rootRoute,
} as any)

const ReportsRoute = ReportsImport.update({
  path: '/reports',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ExternalPlatformsRoute = ExternalPlatformsImport.update({
  path: '/external-platforms',
  getParentRoute: () => rootRoute,
} as any)

const DriversRoute = DriversImport.update({
  path: '/drivers',
  getParentRoute: () => rootRoute,
} as any)

const ChargingStationsRoute = ChargingStationsImport.update({
  path: '/charging-stations',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  path: '/',
  getParentRoute: () => SettingsRoute,
} as any)

const DriversIndexRoute = DriversIndexImport.update({
  path: '/',
  getParentRoute: () => DriversRoute,
} as any)

const ChargingStationsIndexRoute = ChargingStationsIndexImport.update({
  path: '/',
  getParentRoute: () => ChargingStationsRoute,
} as any)

const SettingsServerRoute = SettingsServerImport.update({
  path: '/server',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsRolesRoute = SettingsRolesImport.update({
  path: '/roles',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsMembersRoute = SettingsMembersImport.update({
  path: '/members',
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsAccountRoute = SettingsAccountImport.update({
  path: '/account',
  getParentRoute: () => SettingsRoute,
} as any)

const DriversDriverIdRoute = DriversDriverIdImport.update({
  path: '/$driverId',
  getParentRoute: () => DriversRoute,
} as any)

const ChargingStationsStationIdRoute = ChargingStationsStationIdImport.update({
  path: '/$stationId',
  getParentRoute: () => ChargingStationsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/charging-stations': {
      preLoaderRoute: typeof ChargingStationsImport
      parentRoute: typeof rootRoute
    }
    '/drivers': {
      preLoaderRoute: typeof DriversImport
      parentRoute: typeof rootRoute
    }
    '/external-platforms': {
      preLoaderRoute: typeof ExternalPlatformsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/reports': {
      preLoaderRoute: typeof ReportsImport
      parentRoute: typeof rootRoute
    }
    '/revenue': {
      preLoaderRoute: typeof RevenueImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/tarrif': {
      preLoaderRoute: typeof TarrifImport
      parentRoute: typeof rootRoute
    }
    '/transactions': {
      preLoaderRoute: typeof TransactionsImport
      parentRoute: typeof rootRoute
    }
    '/charging-stations/$stationId': {
      preLoaderRoute: typeof ChargingStationsStationIdImport
      parentRoute: typeof ChargingStationsImport
    }
    '/drivers/$driverId': {
      preLoaderRoute: typeof DriversDriverIdImport
      parentRoute: typeof DriversImport
    }
    '/settings/account': {
      preLoaderRoute: typeof SettingsAccountImport
      parentRoute: typeof SettingsImport
    }
    '/settings/members': {
      preLoaderRoute: typeof SettingsMembersImport
      parentRoute: typeof SettingsImport
    }
    '/settings/roles': {
      preLoaderRoute: typeof SettingsRolesImport
      parentRoute: typeof SettingsImport
    }
    '/settings/server': {
      preLoaderRoute: typeof SettingsServerImport
      parentRoute: typeof SettingsImport
    }
    '/charging-stations/': {
      preLoaderRoute: typeof ChargingStationsIndexImport
      parentRoute: typeof ChargingStationsImport
    }
    '/drivers/': {
      preLoaderRoute: typeof DriversIndexImport
      parentRoute: typeof DriversImport
    }
    '/settings/': {
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof SettingsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  ChargingStationsRoute.addChildren([
    ChargingStationsStationIdRoute,
    ChargingStationsIndexRoute,
  ]),
  DriversRoute.addChildren([DriversDriverIdRoute, DriversIndexRoute]),
  ExternalPlatformsRoute,
  LoginRoute,
  ProfileRoute,
  ReportsRoute,
  RevenueRoute,
  SettingsRoute.addChildren([
    SettingsAccountRoute,
    SettingsMembersRoute,
    SettingsRolesRoute,
    SettingsServerRoute,
    SettingsIndexRoute,
  ]),
  TarrifRoute,
  TransactionsRoute,
])

/* prettier-ignore-end */
