generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               String            @id @default(uuid()) @db.Uuid
  name             String            @db.VarChar(50)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  Domains          Domain[]
  Memberships      Membership[]
  Roles            Role[]
  ChargingStations ChargingStation[]
  IdTokens         IdToken[]
  Drivers          Driver[]

  @@map("org")
}

model Domain {
  domain    String       @id @db.VarChar(50)
  orgId     String       @db.Uuid
  Org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime     @default(now())
}

model User {
  id            String             @id @default(uuid()) @db.Uuid
  name          String             @db.VarChar(50)
  email         String             @unique @db.VarChar(255)
  createdAt     DateTime           @default(now())
  SensitiveInfo UserSensitiveInfo?
  Memberships   Membership[]
  Sessions      Session[]
}

model UserSensitiveInfo {
  userId   String  @id @db.Uuid
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  password String? @db.VarChar(80)

  @@map("usi")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Membership {
  userId    String       @db.Uuid
  User      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId     String       @db.Uuid
  Org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleType  RoleType     @default(custom)
  roleId    String?      @db.Uuid
  Role      Role?        @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())

  @@id([userId, orgId])
}

enum RoleType {
  owner
  custom
}

model Role {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @db.VarChar(50)
  permissions Json         @default("[]")
  orgId       String       @db.Uuid
  Org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Memberships Membership[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ChargingStation {
  id                  String       @id @default(uuid()) @db.Uuid
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  urlName             String       @db.VarChar(50)
  friendlyName        String?      @db.VarChar(50)
  orgId               String       @db.Uuid
  Org                 Organization @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  latitude            Int?         @map("lat") @db.SmallInt
  longitude           Int?         @map("lon") @db.SmallInt
  lastBootNotifTime   DateTime?    @map("lbnt")
  lastBootNotifReason String?      @map("lbnr") @db.VarChar(20)
  serialNumber        String?      @db.VarChar(25)
  model               String?      @db.VarChar(20)
  vendorName          String?      @db.VarChar(50)
  firmwareVersion     String?      @map("firmV") @db.VarChar(50)
  modem_iccid         String?      @map("iccid") @db.VarChar(20)
  modem_imsi          String?      @map("imsi") @db.VarChar(20)
  is_active           Boolean      @default(true)
  EVSEs               EVSE[]
  Connectors          Connector[]

  @@unique([orgId, urlName])
}

model EVSE {
  sn           Int             @db.SmallInt
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  friendlyName String?         @db.VarChar(50)
  stationId    String          @db.Uuid
  Station      ChargingStation @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Connectors   Connector[]

  @@id([sn, stationId])
}

model Connector {
  sn        Int             @db.SmallInt
  stationId String          @db.Uuid
  Station   ChargingStation @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  evseNum   Int             @db.SmallInt
  EVSE      EVSE            @relation(fields: [evseNum, stationId], references: [sn, stationId], onDelete: Cascade, onUpdate: Cascade)
  typeId    String?
  Type      ConnectorType?  @relation(fields: [typeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@id([sn, evseNum])
}

model ConnectorType {
  id         String      @id
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @db.VarChar(20)
  iconB64    String?
  Connectors Connector[]
}

model Driver {
  id        String       @id @default(uuid()) @db.Uuid
  name      String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  is_active Boolean      @default(true)
  orgId     String       @db.Uuid
  Org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  IdToken   IdToken[]
}

model IdToken {
  id        String       @id @default(uuid()) @db.Uuid
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  is_active Boolean      @default(true)
  orgId     String       @db.Uuid
  Org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // token must be in lowercase
  token     String       @db.VarChar(36)
  driverId  String       @db.Uuid
  Driver    Driver       @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([token, orgId])
}
