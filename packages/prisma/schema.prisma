generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid()) @db.Uuid
  name          String             @db.VarChar(50)
  email         String             @unique @db.VarChar(255)
  createdAt     DateTime           @default(now())
  roleType      RoleType           @default(custom)
  roleId        String?            @db.Uuid
  Role          Role?              @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  SensitiveInfo UserSensitiveInfo?
  Sessions      Session[]
}

model UserSensitiveInfo {
  userId   String  @id @db.Uuid
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  password String? @db.VarChar(80)

  @@map("usi")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum RoleType {
  owner
  custom
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(50)
  permissions Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User[]
}

model ChargingStation {
  id                  String              @id @default(uuid()) @db.Uuid
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  urlName             String              @unique @db.VarChar(50)
  friendlyName        String?             @db.VarChar(50)
  latitude            Int?                @db.SmallInt
  longitude           Int?                @db.SmallInt
  lastBootNotifTime   DateTime?
  lastBootNotifReason String?             @db.VarChar(20)
  serialNumber        String?             @db.VarChar(25)
  model               String?             @db.VarChar(20)
  vendorName          String?             @db.VarChar(50)
  firmwareVersion     String?             @db.VarChar(50)
  modem_iccid         String?             @db.VarChar(20)
  modem_imsi          String?             @db.VarChar(20)
  is_active           Boolean             @default(true)
  EVSEs               EVSE[]
  Connectors          Connector[]
  Transactions        Transaction[]
  MeterValues         MeterSampledValue[]
  NotifyEvents        NotifyEvent[]
}

model EVSE {
  sn           Int             @db.SmallInt
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  friendlyName String?         @db.VarChar(50)
  stationId    String          @db.Uuid
  Station      ChargingStation @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Connectors   Connector[]

  @@id([stationId, sn])
}

model Connector {
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  sn              Int             @db.SmallInt
  stationId       String          @db.Uuid
  Station         ChargingStation @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  evseNum         Int             @db.SmallInt
  EVSE            EVSE            @relation(fields: [evseNum, stationId], references: [sn, stationId], onDelete: Cascade, onUpdate: Cascade)
  typeId          String?
  Type            ConnectorType?  @relation(fields: [typeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  status          ConnectorStatus @default(Unavailable)
  statusUpdatedAt DateTime        @default(now()) @db.Timestamptz()

  @@id([stationId, evseNum, sn])
}

enum ConnectorStatus {
  Available
  Occupied
  Reserved
  Unavailable
  Faulted
}

model ConnectorType {
  id         String      @id
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String      @db.VarChar(20)
  iconB64    String?
  Connectors Connector[]
}

model Driver {
  id        String    @id @default(uuid()) @db.Uuid
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  is_active Boolean   @default(true)
  IdToken   IdToken[]
}

model IdToken {
  id           String             @id @default(uuid()) @db.Uuid
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  is_active    Boolean            @default(true)
  token        String             @unique @db.VarChar(36) // token must be in lowercase
  driverId     String             @db.Uuid
  Driver       Driver             @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Transactions Transaction[]
  TxEvents     TransactionEvent[]
}

model Transaction {
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  serverId           String                 @id @default(uuid()) @db.Uuid
  offline            Boolean                @default(false)
  numberOfPhasesUsed Int?                   @db.SmallInt
  cableMaxCurrent    Int?                   @db.SmallInt
  reservationId      Int?
  localId            String                 @db.VarChar(36)
  chargingState      ChargingStateEnumType?
  timeSpentCharging  Int?                   @db.SmallInt
  stoppedReason      ReasonEnumType?
  remoteStartId      Int?
  stationId          String                 @db.Uuid
  Station            ChargingStation        @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  evseSn             Int?                   @db.SmallInt
  connectorSn        Int?                   @db.SmallInt
  Events             TransactionEvent[]
  MeterValues        MeterSampledValue[]
  idTokenId          String?                @db.Uuid
  IdToken            IdToken?               @relation(fields: [idTokenId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  NotifyEvents       NotifyEvent[]

  @@index([stationId, localId])
}

model TransactionEvent {
  eventType          TxStateEnum
  timestamp          DateTime               @db.Timestamptz()
  triggerReason      TriggerReasonEnumType
  seqNo              Int                    @db.SmallInt
  offline            Boolean                @default(false)
  numberOfPhasesUsed Int?                   @db.SmallInt
  cableMaxCurrent    Int?                   @db.SmallInt
  reservationId      Int?
  txId               String                 @db.Uuid
  Tx                 Transaction            @relation(fields: [txId], references: [serverId], onDelete: Cascade, onUpdate: Cascade)
  chargingState      ChargingStateEnumType?
  timeSpentCharging  Int?                   @db.SmallInt
  stoppedReason      ReasonEnumType?
  remoteStartId      Int?
  evseSn             Int?                   @db.SmallInt
  connectorSn        Int?                   @db.SmallInt
  createdAt          DateTime               @default(now())
  idTokenId          String?                @db.Uuid
  IdToken            IdToken?               @relation(fields: [idTokenId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@id([txId, seqNo])
}

enum TxStateEnum {
  Started
  Updated
  Ended
}

enum TriggerReasonEnumType {
  Authorized
  CablePluggedIn
  ChargingRateChanged
  ChargingStateChanged
  Deauthorized
  EnergyLimitReached
  EVCommunicationLost
  EVConnectTimeout
  MeterValueClock
  MeterValuePeriodic
  TimeLimitReached
  Trigger
  UnlockCommand
  StopAuthorized
  EVDeparted
  EVDetected
  RemoteStop
  RemoteStart
  AbnormalCondition
  SignedDataReceived
  ResetCommand
}

enum ChargingStateEnumType {
  Charging
  EVConnected
  SuspendedEV
  SuspendedEVSE
  Idle
}

enum ReasonEnumType {
  DeAuthorized
  EmergencyStop
  EnergyLimitReached
  EVDisconnected
  GroundFault
  ImmediateReset
  Local
  LocalOutOfCredit
  MasterPass
  Other
  OvercurrentFault
  PowerLoss
  PowerQuality
  Reboot
  Remote
  SOCLimitReached
  StoppedByEV
  TimeLimitReached
  Timeout
}

model MeterSampledValue {
  id             String             @default(uuid()) @db.Uuid
  stationId      String             @db.Uuid
  Station        ChargingStation    @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  txId           String?            @db.Uuid
  Tx             Transaction?       @relation(fields: [txId], references: [serverId], onDelete: Cascade, onUpdate: Cascade)
  timestamp      DateTime           @db.Timestamptz()
  value          Float
  context        String             @default("Sample.Periodic")
  measurand      String             @default("Energy.Active.Import.Register")
  phase          String?
  location       MeterValueLocation @default(Outlet)
  unitOfMeasure  String?            @db.VarChar(20)
  unitMultiplier Int                @default(0) @db.SmallInt
  signedData     String?
  signingMethod  String?            @db.VarChar(50)
  encodingMethod String?            @db.VarChar(50)
  publicKey      String?
  createdAt      DateTime           @default(now())

  @@id([stationId, id])
}

enum MeterValueLocation {
  Body
  Cable
  EV
  Inlet
  Outlet
}

model NotifyEvent {
  id                   String                    @default(uuid()) @db.Uuid
  stationId            String                    @db.Uuid
  Station              ChargingStation           @relation(fields: [stationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timestamp            DateTime                  @db.Timestamptz()
  tbc                  Boolean                   @default(false)
  seqNo                Int                       @db.SmallInt
  localEventId         Int
  trigger              EventTriggerEnumType
  cause                Int?
  actualValue          String
  techCode             String?                   @db.VarChar(50)
  techInfo             String?                   @db.VarChar(500)
  cleared              Boolean?
  localTxId            String?                   @db.VarChar(36)
  txId                 String?                   @db.Uuid
  Tx                   Transaction?              @relation(fields: [txId], references: [serverId], onDelete: Cascade, onUpdate: Cascade)
  variableMonitoringId Int?
  type                 EventNotificationEnumType
  componentName        String                    @db.VarChar(50)
  componentInstance    String?                   @db.VarChar(50)
  evseSn               Int?
  connectorSn          Int?
  variableName         String                    @db.VarChar(50)
  variableInstance     String?                   @db.VarChar(50)

  @@id([stationId, id])
}

enum EventTriggerEnumType {
  Alerting
  Delta
  Periodic
}

enum EventNotificationEnumType {
  HardWiredNotification
  HardWiredMonitor
  PreconfiguredMonitor
  CustomMonitor
}

model Settings {
  key       SettingsKeyEnum @id
  value     String          @db.Text
  updatedAt DateTime        @updatedAt
}

enum SettingsKeyEnum {
  name
  logoB64
}
